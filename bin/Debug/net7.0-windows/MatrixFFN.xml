<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MatrixFFN</name>
    </assembly>
    <members>
        <member name="T:MatrixFFN.FFN">
            <summary>
            FFN = feed-forward-network. Ein klassisches sigmoides Netzwerk mit
            automatischer Datennormalisierung.
            <para>
            <para>
            Ich werde alles mit 'decimal' realisieren - dachte ich.
            Dieser Wertetyp wird aber nicht von 'Math' unterstützt und ist eine
            Baustelle. So muß es mit 'double' gehen.
            </para>
            </para>
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.schichtenNo">
            <summary>
            Anzahl der Schichten.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.gewichte">
            <summary>
            Gewichtsmatrixen
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.gewichteT">
            <summary>
            Gewichtsmatrizen transponiert
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.gewichteLern">
            <summary>
            Spezialmatrix für die Lernraten zum Weitergeben der Alphas
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.deltaGewichte">
            <summary>
            für die Fehlerkorrektur: delta Gewichtsmatrizen
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.deltaGewichteT">
            <summary>
            für die Fehlerkorrektur: delta Gewichtsmatrizen transponiert
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.sFehlerT">
            <summary>
            Fehlerwert in der Fehlerkorrektur
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.gradientT">
            <summary>
            Ableitung der Aktivierung
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.biasT">
            <summary>
            Biasmatrixen
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.targetT">
            <summary>
            Zielmuster für die Fehlerreflexion
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.netzSchichten">
            <summary>
            Netzwerkmatrixen der Schichten. Wird beim Lernen gebraucht.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.netzSchichtenT">
            <summary>
            Netzwerkmatrixen der Schichten. Wird beim Lernen gebraucht.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.lernRateT">
            <summary>
            Matrix für die Lernrate. Die Datennormalisierung wirkt sich
            auf die Lernwerte aus - dies kann auch weich im Hidden-Bereich
            passieren.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.lernRateTprev">
            <summary>
            Zusatzfeld für den schnelleren Lernprozeß. Soll die Lernraten
            der vorherigen Schicht schneller übergeben.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.normalisiereDaten">
            <summary>
            Sollen die Daten mit dem 'DatenNetz' normalisiert werden?
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.schichtenTopic">
            <summary>
            Bei der Initialisierung des Netzes erhalten.
            <para>
            Bsp.: 3 Schichten { 2, 4, 3 }  oder 2 Schichten { 3, 4 }
            </para>
            <para>
            Beachte: erster Wert = Eingabeschicht, letzter Wert = Ausgabeschicht
            </para>
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.fehlerSumme">
            <summary>
            Ergibt sich beim 'Fit'ten und ist die Summe über alle Epochen.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.fehlerDurchschnitt">
            <summary>
            Hier ist die Fehlersumme durch alle Epochen geteilt.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.dNetzEingang">
            <summary>
            Das 'DatenNetz' normalisiert die Eingangsdaten und liefert
            featurespezifische Lernwerte.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.dNetzAusgang">
            <summary>
            Das 'DatenNetz' normalisiert die Ausgangsdaten und liefert
            featurespezifische Lernwerte.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.dateiName">
            <summary>
            Dateiname für die Dateifunktionen.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.epochenAnzahl">
            <summary>
            Zähler für die Lernepochen.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.zeitPredict">
            <summary>
            Zeitausgabe von stopUhrPredict
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.stopUhrPredict">
            <summary>
            Zeitstopper für Predict
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.zeitTrain">
            <summary>
            Zeitausgabe von stopUhrTrain
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.stopUhrTrain">
            <summary>
            Zeitstopper für Train
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.zeitFit">
            <summary>
             Zeitausgabe von stopUhrFit
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.stopUhrFit">
            <summary>
            Zeitstopper für Fit
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.listeFehler">
            <summary>
            Fehlerliste aus der Lebenszeit im Training erhalten.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.listeEpochen">
            <summary>
            Epochenliste aus der Lebenszeit im Training erhalten.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.arbeitsTopic">
            <summary>
            String für das Fontend für die Topic.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.adaptLernRate">
            <summary>
            Wahrheitswert über schon veränderte Alphawerte.
            </summary>
        </member>
        <member name="F:MatrixFFN.FFN.adaptLernRateOld">
            <summary>
            Der letzte Skalierfaktor der Lernwerte.
            </summary>
        </member>
        <member name="M:MatrixFFN.FFN.#ctor(System.Int32[],System.Boolean,System.String)">
            <summary>
            Der Konstruktor der ein neues Netzwerk initialisiert.
            <para>
            Die Liste der Schichten muß immer mindestens 3 groß sein, da 
            immer mindestens eine Hidden-Schicht gewollt ist.
            </para>
            </summary>
            <param name="schichtenIn">Bsp.: schichten = { 2, 3, 1 } oder = { 3, 15, 7, 2 }</param>
            <param name="normalisiere">Neu: Datennormalisierung mittels des 'DatenNetz'es.</param>
            <param name="name">Dateiname für die Dateioperationen</param>
        </member>
        <member name="M:MatrixFFN.FFN.#ctor(System.String)">
            <summary>
            Dieser Konstruktor lädt ein bereits gespeichertes Netzwerk.
            </summary>
            <param name="name">der zu nehmende Dateiname</param>
        </member>
        <member name="M:MatrixFFN.FFN.SpeicherDaten(System.String)">
            <summary>
            Speichert das Netzwerk ( alle Variablen ). Beachte: mindestens einmal
            muß 'Train' absolviert werden, damit überhaupt etwas zum Speichern 
            existiert.
            </summary>
            <param name="name">erwünschter Dateiname</param>
            <returns>Funktionserfolg</returns>
        </member>
        <member name="M:MatrixFFN.FFN.LadeDaten(System.String)">
            <summary>
            Lädt ein gespeichertes Netzwerk. Dies kann als Konstruktoraufruf laufen
            bzw. auch mittendrin. Das gesamte Netzwerk wird anhand der gespeicherten
            Daten neu initialisiert - kann seine Form also komplett ändern.
            </summary>
            <param name="name">Dateiname</param>
            <returns>Funktionserfolg</returns>
        </member>
        <member name="M:MatrixFFN.FFN.NormEingangsArray(System.Double[])">
            <summary>
            Liefert über das DatenNetz ( Eingang ) die konvertierten Daten.
            </summary>
            <param name="realDaten">Eingabefeld</param>
            <returns>Feld mit den normalisierten Werten</returns>
        </member>
        <member name="M:MatrixFFN.FFN.NormAusgangsArray(System.Double[])">
            <summary>
            Liefert über das DatenNetz ( Ausgang ) die konvertierten Daten.
            </summary>
            <param name="realDaten">Eingabefeld</param>
            <returns>Feld mit den normalisierten Werten</returns>
        </member>
        <member name="M:MatrixFFN.FFN.DeNormEingangsArray(System.Double[])">
            <summary>
            Liefert über das DatenNetz ( Eingang ) die konvertierten Daten.
            </summary>
            <param name="normDaten">Eingabefeld</param>
            <returns>Feld mit den entnormalisierten Werten</returns>
        </member>
        <member name="M:MatrixFFN.FFN.DeNormAusgangsArray(System.Double[])">
            <summary>
            Liefert über das DatenNetz ( Ausgang ) die konvertierten Daten.
            </summary>
            <param name="normDaten">Eingabefeld</param>
            <returns>Feld mit den entnormalisierten Werten</returns>
        </member>
        <member name="M:MatrixFFN.FFN.Predict(System.Double[])">
            <summary>
            Diese Funktion führt einen 'feed forward predict' mit den 
            übergebenen Daten aus.
            </summary>
            <param name="eingang">Eingangsdaten in das Netz</param>
            <returns>Ausgangsdaten des Netzes</returns>
        </member>
        <member name="M:MatrixFFN.FFN.Train(System.Double[],System.Double[])">
            <summary>
            Trainiert einmal das Netzwerk mit dem übergebenen
            Ein-/Ausgabemuster.
            <para>Gibt den 'mean square sum'-Fehler zurück.</para>
            </summary>
            <param name="eingang">Netzwerkeingang</param>
            <param name="ausgang">Netzwerkausgang</param>
            <returns>Liefert den Fehlerwert zurück.</returns>
        </member>
        <member name="M:MatrixFFN.FFN.Fit(System.Double[][],System.Double[][],System.Int64)">
            <summary>
            Trainiert ganze Epochen ( komplette Datensätze ) und präsentiert alle Daten pro
            Epoche einmal zufällig.
            <para>
            Normalisiert die Daten automatisch ( empfohlen )
            </para>
            </summary>
            <param name="eingabeArray">Eingabedaten</param>
            <param name="ausgabeArray">Ausgabedaten</param>
            <param name="epochenIn">Anzahl der Epochen</param>
            <returns></returns>
        </member>
        <member name="M:MatrixFFN.FFN.DatenNetzInit(System.Double[][],System.Double[][])">
            <summary>
            Hier werden automatisch aus den übergebenen Daten die
            beiden DatenNetze gebildet.
            <para>
            Bisher werden keine kategorischen Daten verarbeitet. ( ToDo-Liste )
            </para>
            </summary>
            <param name="datenEingabeArray">die Eingaben ins Netz als Feld</param>
            <param name="datenAusgabeArray">die Ausgaben des Netzes als Feld</param>
        </member>
        <member name="M:MatrixFFN.FFN.SetzeLernRate(System.Double)">
            <summary>
            Multipliziert die Lernwerte mit dem übergebenen Wert. 
            <para>
            Nützlich für die Adaption der Lernschritte zum Bsp.
            mittels des Fehlerwertes. Skaliert die bisherigen Alphawerte.
            </para>
            <para>
            Falls schon einmal verändert, wird die alte Korrektur rückgängig
            gemacht und der neue Wert benutzt.
            </para>
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:MatrixFFN.FFN.ParseTopic">
            <summary>
            Hilfsfunktion für das Fontend, damit nach dem Laden
            die Oberfläche auch alle Daten bekommt.
            <para>
            Aus der Netztopic ( int[] ) wird der Darstellungsstring
            erstellt.
            </para>
            </summary>
        </member>
        <member name="T:MatrixFFN.FFN_Window">
            <summary>
            Interaktionslogik für FFN_Window.xaml
            </summary>
            <summary>
            FFN_Window
            </summary>
        </member>
        <member name="M:MatrixFFN.FFN_Window.#ctor">
            <summary>
            Der Konstruktor, der alle Komponenten initialisiert.
            </summary>
        </member>
        <member name="M:MatrixFFN.FFN_Window.BekommeVerzeichnis">
            <summary>
            Liefert das aktuelle Verzeichnis mit OrdnerSeparatorZeichen.
            </summary>
            <returns>aktuelles Verzeichnis...</returns>
        </member>
        <member name="M:MatrixFFN.FFN_Window.SetzeNameLabel">
            <summary>
            Setzt in der Dateiansicht den korrekten Dateinamen.
            </summary>
        </member>
        <member name="M:MatrixFFN.FFN_Window.SetzeTextTopic(System.String)">
            <summary>
            Setzt den Labeltext für die Topic.
            </summary>
            <param name="text">anzuzeigender Text</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.Window_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Da ich das Fenster behalten will, muß hier das Schließen abgefangen werden. Danach wird 'Hide()' aufgerufen.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonLaden_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonLadenVon_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonSpeichern_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonSpeichernAls_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.textTopic_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handler - Textänderung in der TextBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonDatensatzParabel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.ArrayToString(System.Double[][],System.Boolean)">
            <summary>
            Hilfsfunktion, die einen Datensatz zum String konvertiert.
            </summary>
            <param name="data">ein Datensatz</param>
            <returns>die Stringrepräsentation</returns>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonInit_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonTrain1_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonTrain10_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonTrain100_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonTrain1000_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonTrain10000_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.buttonPredict_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handlefunktion - MenuItem_Click
            </summary>
            <param name="sender">Quelle</param>
            <param name="e">Quellparameter</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.Anzeige(System.String)">
            <summary>
            Hilfsfunktion, die Statustext ausgibt - immer neu.
            </summary>
            <param name="text">der auszugebende Text</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.topicCanvas_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Versuch einen Doppelklick zu verstehen...
            </summary>
            <param name="sender">Eventquelle</param>
            <param name="e">Quellargumente</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.datenCanvas_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Versuch einen Doppelklick zu verstehen...
            </summary>
            <param name="sender">Eventquelle</param>
            <param name="e">Quellargumente</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.fehlerCanvas_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Versuch einen Doppelklick zu verstehen...
            </summary>
            <param name="sender">Eventquelle</param>
            <param name="e">Quellargumente</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.SetzeStatusText(System.String)">
            <summary>
            Hilfsfunktion, die den Text der Statusleiste
            setzt bzw. löscht.
            </summary>
            <param name="neuerText">der neue Text</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.SetzeStatusProgress(System.Int32)">
            <summary>
            Hilfsfunktion, die den Prozentwert des
            Fortschrittsbalkens setzt.
            </summary>
            <param name="prozent">prozentualer Fortschritt</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.SetzteStatusCheckStart(System.String)">
            <summary>
            Start bewirkt Rot für den Betrachter.
            </summary>
            <param name="text">Ausgabetext in der Leiste</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.SetzeStatusEnde(System.String)">
            <summary>
            Ende bewirkt Grün für den Betrachter.
            </summary>
            <param name="text">Ausgabetext in der Leiste</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.SetzeStatusArbeit(System.String,System.Int32)">
            <summary>
            In Arbeit soll die Farbe anders sein.
            </summary>
            <param name="text">Ausgabetext in der Leiste</param>
            <param name="prozent">prozentualer Fortschritt</param>
        </member>
        <member name="M:MatrixFFN.FFN_Window.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MatrixFFN.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:MatrixFFN.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:MatrixFFN.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeZeigeNoDaten(System.Int32)">
            <summary>
            Setzt diesen Wert, damit im Diagramm nur die letzten gezeigt werden.
            <para>0 entspricht alle Daten zeigen.</para>
            </summary>
            <param name="inNo">der neue Wert für 'zeigeNoDaten'</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.DatenClear">
            <summary>
            Löscht alle Daten in den Datenlisten.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.DatenAdd(System.Double[],System.Double[])">
            <summary>
            Speichert die Datensätze in 2 Listen ( X, Y ).
            </summary>
            <param name="inX">Feld mit den X-Koordinaten</param>
            <param name="inY">Feld mit den Y-Koordinaten</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.DatenAdd(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Double})">
            <summary>
            Speichert die Datensätze in 2 Listen ( X, Y ).
            </summary>
            <param name="inX">Liste mit den X-Koordinaten</param>
            <param name="inY">Liste mit den Y-Koordinaten</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.ZeigeChart">
            <summary>
            Gibt alle Daten aus falls es welche gibt.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.GetXpos(System.Double)">
            <summary>
            Errechnet aus dem logischen Datenwert die Position
            im Diagramm fur die X-Position.
            </summary>
            <param name="xWert">einer der Werte des Datensatzes</param>
            <returns>die reale X-Position im Canvas</returns>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.GetYpos(System.Double)">
            <summary>
            Errechnet aus dem logischen Datenwert die Position
            im Diagramm fur die Y-Position.
            </summary>
            <param name="yWert">einer der Werte des Datensatzes</param>
            <returns>die reale Y-Position im Canvas</returns>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeBildLabel(System.Double,System.Double,System.String,System.Int32,System.Boolean)">
            <summary>
            Hilfsfunktion für 'bild', die ein Label über die 
            übergebene Koordinate setzt. Kann Objekte in 
            der Chart beschriften.
            </summary>
            <param name="xPos">Abstand vom linken Rand</param>
            <param name="yPos">Abstand vom rechten Rand</param>
            <param name="text">Textausgabe</param>
            <param name="fontSize">Schriftgröße</param>
            <param name="bold">Schriftstil fett</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeBildLinie(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Hilfsfunktion, die eine Linie in
            'bild' setzt.
            </summary>
            <param name="x1">von X-Koordinate</param>
            <param name="y1">von Y-Koordinate</param>
            <param name="x2">bis X-Koordinate</param>
            <param name="y2">bis Y-Koordinate</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeBildLinieStroked(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Hilfsfunktion, die eine Linie in
            'bild' setzt.
            </summary>
            <param name="x1">von X-Koordinate</param>
            <param name="y1">von Y-Koordinate</param>
            <param name="x2">bis X-Koordinate</param>
            <param name="y2">bis Y-Koordinate</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeBildEllipse(System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Brush,System.Double,System.Double)">
            <summary>
            Hilfsfunktion, die eine Ellipse in 'bild' setzt.
            </summary>
            <param name="xPos">Abstand von Links minus die halbe Breite</param>
            <param name="yPos">Abstand von Oben minus die halbe Höhe</param>
            <param name="height">Standardhöhe falls nicht geändert</param>
            <param name="width">Standardbreite falls nicht geändert</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.ShowWindow">
            <summary>
            Gibt alle Daten aus falls es welche gibt.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeFenBildLabel(System.Double,System.Double,System.String,System.Int32,System.Boolean)">
            <summary>
            Hilfsfunktion für 'fenster.fensterCanvas', die ein Label über die 
            übergebene Koordinate setzt. Kann Objekte in 
            der Chart beschriften.
            </summary>
            <param name="xPos">Abstand vom linken Rand</param>
            <param name="yPos">Abstand vom rechten Rand</param>
            <param name="text">Textausgabe</param>
            <param name="fontSize">Schriftgröße</param>
            <param name="bold">Schriftstil fett</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeFenBildLinie(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Hilfsfunktion, die eine Linie in
            'fenster.fensterCanvas' setzt.
            </summary>
            <param name="x1">von X-Koordinate</param>
            <param name="y1">von Y-Koordinate</param>
            <param name="x2">bis X-Koordinate</param>
            <param name="y2">bis Y-Koordinate</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeFenBildLinieStroked(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Hilfsfunktion, die eine Linie in
            'fenster.fensterCanvas' setzt.
            </summary>
            <param name="x1">von X-Koordinate</param>
            <param name="y1">von Y-Koordinate</param>
            <param name="x2">bis X-Koordinate</param>
            <param name="y2">bis Y-Koordinate</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.SetzeFenBildEllipse(System.Double,System.Double,System.Double,System.Double,System.Windows.Media.Brush,System.Double,System.Double)">
            <summary>
            Hilfsfunktion, die eine Ellipse in 'fenster.fensterCanvas' setzt.
            </summary>
            <param name="xPos">Abstand von Links minus die halbe Breite</param>
            <param name="yPos">Abstand von Oben minus die halbe Höhe</param>
            <param name="height">Standardhöhe falls nicht geändert</param>
            <param name="width">Standardbreite falls nicht geändert</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.GetFenXpos(System.Double)">
            <summary>
            Errechnet aus dem logischen Datenwert die Position
            im Diagramm fur die X-Position.
            </summary>
            <param name="xWert">einer der Werte des Datensatzes</param>
            <returns>die reale X-Position im Canvas</returns>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasChart.GetFenYpos(System.Double)">
            <summary>
            Errechnet aus dem logischen Datenwert die Position
            im Diagramm fur die Y-Position.
            </summary>
            <param name="yWert">einer der Werte des Datensatzes</param>
            <returns>die reale Y-Position im Canvas</returns>
        </member>
        <member name="T:MatrixFFN.Tools.CanvasFenster">
            <summary>
            Interaktionslogik für CanvasFenster.xaml
            </summary>
            <summary>
            CanvasFenster
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasFenster.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.ZeigeTopic">
            <summary>
            Belebt den 'netzTopicCanvas' mit der 'arbeitsTopic', nämlich 
            der Netzbeschreibung.
            </summary>
            <param name="inTopic">Strukturfeld von 'ParseTopic' erhalten.</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.SetzeTopicLine(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Hilfsfunktion, die eine Linie in
            'netzTopicCanvas' setzt.
            </summary>
            <param name="x1">von X-Koordinate</param>
            <param name="y1">von Y-Koordinate</param>
            <param name="x2">bis X-Koordinate</param>
            <param name="y2">bis Y-Koordinate</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.SetzeTopicLineStroked(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Hilfsfunktion, die eine gestrichelte Linie in
            'netzTopicCanvas' setzt.
            </summary>
            <param name="x1">von X-Koordinate</param>
            <param name="y1">von Y-Koordinate</param>
            <param name="x2">bis X-Koordinate</param>
            <param name="y2">bis Y-Koordinate</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.SetzeTopicEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Hilfsfunktion, die eine Ellipse in 'netzTopicCanvas' setzt.
            </summary>
            <param name="xPos">Abstand von Links minus die halbe Breite</param>
            <param name="yPos">Abstand von Oben minus die halbe Höhe</param>
            <param name="height">Standardhöhe falls nicht geändert</param>
            <param name="width">Standardbreite falls nicht geändert</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.SetzeTopicLabel(System.Double,System.Double,System.String,System.Double,System.Double)">
            <summary>
            Hilfsfunktion für 'netzTopicCanvas', die ein Label auf die 
            übergebene Koordinate setzt.
            </summary>
            <param name="xPos">Abstand vom linken Rand</param>
            <param name="yPos">Abstand vom rechten Rand</param>
            <param name="text">Textausgabe</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.ParseTopic(System.String)">
            <summary>
            Soll aus einer Stringeingabe die Netzstruktur als
            int[] erkennen.
            </summary>
            <param name="topic">Der Eingabestring</param>
            <param name="ergebnis">möglicher Intarray</param>
            <returns>Erfolg der Funktion</returns>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.SetzeFenTopicLine(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Hilfsfunktion, die eine Linie in
            'netzTopicCanvas' setzt.
            </summary>
            <param name="x1">von X-Koordinate</param>
            <param name="y1">von Y-Koordinate</param>
            <param name="x2">bis X-Koordinate</param>
            <param name="y2">bis Y-Koordinate</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.SetzeFenTopicLineStroked(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Hilfsfunktion, die eine gestrichelte Linie in
            'netzTopicCanvas' setzt.
            </summary>
            <param name="x1">von X-Koordinate</param>
            <param name="y1">von Y-Koordinate</param>
            <param name="x2">bis X-Koordinate</param>
            <param name="y2">bis Y-Koordinate</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.SetzeFenTopicEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Hilfsfunktion, die eine Ellipse in 'netzTopicCanvas' setzt.
            </summary>
            <param name="xPos">Abstand von Links minus die halbe Breite</param>
            <param name="yPos">Abstand von Oben minus die halbe Höhe</param>
            <param name="height">Standardhöhe falls nicht geändert</param>
            <param name="width">Standardbreite falls nicht geändert</param>
        </member>
        <member name="M:MatrixFFN.Tools.CanvasTopic.SetzeFenTopicLabel(System.Double,System.Double,System.String,System.Double,System.Double)">
            <summary>
            Hilfsfunktion für 'netzTopicCanvas', die ein Label auf die 
            übergebene Koordinate setzt.
            </summary>
            <param name="xPos">Abstand vom linken Rand</param>
            <param name="yPos">Abstand vom rechten Rand</param>
            <param name="text">Textausgabe</param>
        </member>
        <member name="T:MatrixFFN.Tools.DatenNetz">
            <summary>
            Die Klasse 'DatenNetz' normalisiert die realen Daten und zurück.
            <para>
            Das geht für reale ( Pattern ) und kategorische ( Pattern_Long ) Features.
            </para>
            </summary>
            <remarks>
            Bei Java hatte ich einen MathContext benutzt - hier gibt es 'decimal'. Dieser
            Datentyp soll präzise aber langsam sein. Meine Theorie war bestimmt gut und sollte 
            auch zukunftsweisend sein. Wichtig ist die Abbildung auf das Intervall und zurück.
            <para>
            Deswegen werde ich alles mit 'decimal' realisieren - dachte ich.
            Dieser Wertetyp wird aber nicht von 'Math' unterstützt und ist eine
            Baustelle. So muß es mit 'double' gehen.
            </para>
            </remarks>
        </member>
        <member name="F:MatrixFFN.Tools.DatenNetz.daten">
            <summary>
            Datenobjekt der Klasse - alle Patterns werden hier gefunden.
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.DatenNetz.werteReal">
            <summary>
            Durch die zwei Pattern-Klassen wird hier ein object[] benutzt
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.DatenNetz.werteNorm">
            <summary>
            Dem Netzwerk gegenüber wird alles mit doubles gemacht.
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.DatenNetz.alpha">
            <summary>
            hat alle Lernwerte der Patterns
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.DatenNetz.name">
            <summary>
            Positionsname: Eingabe- oder Ausgabeseite
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.#ctor(System.String)">
            <summary>
            Standardkonstruktor - wichtig für die Serialisierung.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.#ctor(System.IO.BinaryReader)">
            <summary>
            Der Konstruktor, der sich aus der Speicherdatei lädt.
            </summary>
            <param name="reader">die übergebene offene Speicherdatei</param>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.DatenNetzInit(System.Double[][])">
            <summary>
            Hier werden automatisch aus den übergebenen Daten die
            Parameter fürs DatenNetz gebildet.
            <para>
            Bisher werden keine kategorischen Daten verarbeitet. ( mögl. ToDo-Liste )
            </para>
            </summary>
            <param name="datenArray">die Daten fürs Netz als Feld</param>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.SetzeName(System.String)">
            <summary>
            Ich will das DatenNetz in der Ausgabe ( ToString() ) besser darstellen. Deswegen name = { Eingabeseite, Ausgabeseite }
            <para>
            Eingaben ungleich 'Eingabeseite' ergeben automatisch 'Ausgabeseite'
            </para>
            </summary>
            <param name="inName"></param>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.Clear">
            <summary>
            Setzt die Datenliste zurück.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.Add(System.Object)">
            <summary>
            Soll ein beliebiges Objekt im der Liste speichern ( pattern / Pattern_Long )
            </summary>
            <param name="inPattern">zu addierendes Pattern</param>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.ToString">
            <summary>
            Standardrepräsentation des Objekts.
            </summary>
            <returns>Beschreibung des DatenNetz'es</returns>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.Size">
            <summary>
            Liest die Größe der Datenliste aus und gibt sie zurück
            </summary>
            <returns>Größe der Datenliste</returns>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.DatenAlpha">
            <summary>
            Liefert den Alphavektor der die lokale Varianz des jeweiligen
            Patternobjektes ausliest.Dies ist für die angepasste Lernrate
            wichtig. Sollte für Ein- und Ausgabeschicht im Backpropverfahren
            benutzt werden.
            </summary>
            <returns>Ein Array der speziellen Lernwerte</returns>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.SpeicherDaten(System.IO.BinaryWriter)">
            <summary>
            eine traditionelle Speicherroutine ( binär )
            </summary>
            <param name="writer">ein BinaryWriter</param>
            <returns>der Erfolg des Speichervorgangs</returns>
        </member>
        <member name="M:MatrixFFN.Tools.DatenNetz.LadeDaten(System.IO.BinaryReader)">
            <summary>
            eine traditionelle Laderoutine ( binär )
            </summary>
            <param name="reader">ein BinaryReader</param>
            <returns>Erfolg des Ladevorgangs</returns>
        </member>
        <member name="T:MatrixFFN.Tools.Matrix">
            <summary>
            Diese Klasse bildet Matrixrechenarten für das neuronale Netz ab.
            <para>
            Wichtig ist hierbei die Matrixmultiplikation von 2 Matrixen, die
            auch völlig korrekt nach Formelsammlung erfolgt!
            </para>
            <para>Unterteilung der Funktionen in:</para>
            <para>- Operation auf die interne Matrix</para>
            <para>- static Matrix Funktion: Operation auf Rückgabematrix</para>
            <para>- static bool Funktion: Operation auf Zielmatrix ( beste Geschwindigkeit ) </para>
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Matrix.data">
            <summary>
            Daten der Matrix
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Matrix.sizeX">
            <summary>
            X-Größe der Matrix
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Matrix.sizeY">
            <summary>
            Y-Größe der Matrix
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.#ctor">
            <summary>
            Parameterloser Konstruktor für die Serialisierung.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Konstruktor der Klasse, wobei die Matrix mit zufälligen
            Werten zwischen [ -1, 1 ] gefüllt wird.
            <para>eigene Spannen sind erlaubt.</para>
            </summary>
            <param name="inX">die X-Größe der Matrix</param>
            <param name="inY">die Y-Größe der Matrix</param>
            <param name="min">die untere Grenze für die Zufallszahlen</param>
            <param name="max">die obere Grenze für die Zufallszahlen</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Konstruktor der Klasse, wobei ein bestimmter Wert für
            die Elemente gesetzt wird.
            <para>Am schnellsten ist die Nullmatrix erstellt.</para>
            </summary>
            <param name="inX">die X-Größe der Matrix</param>
            <param name="inY">die Y-Größe der Matrix</param>
            <param name="val">bestimmter Elementwert</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.#ctor(System.IO.BinaryReader)">
            <summary>
            Dieser Konstruktor läd seine Daten aus dem BinaryReader und
            initialisiert sich damit.
            </summary>
            <param name="reader">ein BinaryReader</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.ToString">
            <summary>
            Standardausgabe der Matrix.
            </summary>
            <returns>Stringrepräsentation der Matrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Print">
            <summary>
            Gibt die Matrix per ToString() an die Standardausgabe aus.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.AddScalar(System.Double)">
            <summary>
            Addiert den 'value' zu jedem einzelnen Element
            der internen Matrix.
            </summary>
            <param name="value">Wert zum Hinzufügen</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.AddScalar(MatrixFFN.Tools.Matrix,System.Double)">
            <summary>
            Addiert den 'value' zu jedem einzelnen Matrixelement.
            </summary>
            <param name="matrix">Quellenmatrix</param>
            <param name="value">Wert zum Hinzufügen</param>
            <returns>Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.AddScalar(MatrixFFN.Tools.Matrix,System.Double,MatrixFFN.Tools.Matrix)">
            <summary>
            Addiert den 'value' zu jedem einzelnen Matrixelement und liefert
            das  Ergebnis an die Zielmatrix ( beste Geschwindigkeit ).
            </summary>
            <param name="source">Quellenmatrix</param>
            <param name="value">Wert zum Hinzufügen</param>
            <param name="target">Erfolg der Operation</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Add(MatrixFFN.Tools.Matrix)">
            <summary>
            Fügt eine gleichgroße Matrix zur internen hinzu.
            </summary>
            <param name="m">die hinzuzufügende Matrix</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Add(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Hilfsfunktion zur Erleichterung. Addition zweier Matrixen.
            </summary>
            <param name="m1">Matrix 1</param>
            <param name="m2">Matrix 2</param>
            <returns>Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Add(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Hilfsfunktion zur Erleichterung. Addition zweier Matrixen.
            </summary>
            <param name="m1">Matrix 1</param>
            <param name="m2">Matrix 2</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.SubtractScalar(System.Double)">
            <summary>
            Subtrahiert den 'value' von jedem einzelnen Element
            der internen Matrix.
            </summary>
            <param name="value">Wert zum Abziehen</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.SubtractScalar(MatrixFFN.Tools.Matrix,System.Double)">
            <summary>
            Subtrahiert den 'value' von jedem einzelnen Matrixelement.
            </summary>
            <param name="matrix">Quellenmatrix</param>
            <param name="value">Wert zum Abziehen</param>
            <returns>Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.SubtractScalar(MatrixFFN.Tools.Matrix,System.Double,MatrixFFN.Tools.Matrix)">
            <summary>
            Subtrahiert den 'value' von jedem einzelnen Matrixelement und liefert
            das  Ergebnis an die Zielmatrix ( beste Geschwindigkeit ).
            </summary>
            <param name="source">Quellenmatrix</param>
            <param name="value">Wert zum Abziehen</param>
            <param name="target">Erfolg der Operation</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Subtract(MatrixFFN.Tools.Matrix)">
            <summary>
            Zieht eine gleichgroße Matrix von der internen ab.
            </summary>
            <param name="m">die abzuziehende Matrix</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Subtract(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Hilfsfunktion zur Erleichterung. Subtraktion zweier Matrixen.
            </summary>
            <param name="m1">Matrix 1</param>
            <param name="m2">Matrix 2</param>
            <returns>Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Subtract(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Hilfsfunktion zur Erleichterung. Subtrahiert zwei Matrixen
            und schreibt das Ergebnis in die Zielmatrix ( beste Geschwindigkeit ).
            </summary>
            <param name="m1">Matrix 1</param>
            <param name="m2">Matrix 2</param>
            <param name="target">Zielmatrix</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Transpose">
            <summary>
            Transponiert die interne Matrix und verändert dadurch auch
            die Form!
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Transpose(MatrixFFN.Tools.Matrix)">
            <summary>
            Transponiert die Matrix.
            </summary>
            <param name="m">Eingabematrix</param>
            <returns>Ergebnismatrix [ m.sizeY, m.sizeX ]</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Transpose(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Transponiert die Eingabematrix in die Zielmatrix ( beste Geschwindigkeit ).
            </summary>
            <param name="source">Eingabematrix</param>
            <param name="target">Zielmatrix</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.MultiplySkalar(System.Double)">
            <summary>
            Multipliziert jedes Matrixelement mit einem Wert.
            </summary>
            <param name="value">der Multiplikationswert</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.MultiplySkalar(MatrixFFN.Tools.Matrix,System.Double)">
            <summary>
            Multipliziert jedes Matrixelement mit einem Wert.
            </summary>
            <param name="source">Quellmatrix</param>
            <param name="value">der Multiplikationswert</param>
            <returns>Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.MultiplySkalar(MatrixFFN.Tools.Matrix,System.Double,MatrixFFN.Tools.Matrix)">
            <summary>
            Multipliziert jedes Matrixelement mit einem Wert und liefert das 
            Ergebnis in die Zielmatrix ( beste Geschwindigkeit ).
            </summary>
            <param name="source">Quellmatrix</param>
            <param name="value">der Multiplikationswert</param>
            <param name="target">Zielmatrix</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.MultiplySameSize(MatrixFFN.Tools.Matrix)">
            <summary>
            Multipliziert die Eingabematrix zur internen falls
            sie die gleiche Größe hat.
            </summary>
            <param name="m">die EIngabematix</param>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.MultiplySameSize(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Multipliziert die Eingabematrixen falls
            sie die gleiche Größe haben.
            </summary>
            <param name="m1">die 1.EIngabematix</param>
            <param name="m2">die 2.Ringabematrix</param>
            <returns>die Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.MultiplySameSize(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Multipliziert die Eingabematrixen falls
            sie die gleiche Größe haben. Ergebnis wird in die
            Zielmatrix geschrieben ( beste Geschwindigkeit ).
            </summary>
            <param name="m1">die 1.EIngabematix</param>
            <param name="m2">die 2.Ringabematrix</param>
            <param name="target">Zielmatrix</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Multiply(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Das Herzstück: ermittelt das 'Kreuzprodukt' beider Matrixen.
            <para>
            Beachte: ( m1.sizeX == m2.sizeY ) -> target[ m2.sizeX, m1.sizeY]
            </para>
            </summary>
            <param name="m1">Eingabematrix 1</param>
            <param name="m2">Eingabematrix 2</param>
            <returns>Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.Multiply(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Das Herzstück: ermittelt das 'Kreuzprodukt' beider Matrixen.
            <para>
            Beachte: ( m1.sizeX == m2.sizeY ) -> target[ m2.sizeX, m1.sizeY]
            </para>
            </summary>
            <param name="m1">Eingabematrix 1</param>
            <param name="m2">Eingabematrix 2</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.ToSigmoid">
            <summary>
            Wendet die unsymetrische logistische Funktion auf die 
            interne Matrix an - verändert sie also.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.ToSigmoid(MatrixFFN.Tools.Matrix)">
            <summary>
            Liefert das Ergebnis der unsymetrischen logistischen
            Funktion zurück.
            </summary>
            <param name="source">die Eingabematrix</param>
            <returns>die sigmoide Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.ToSigmoid(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Liefert das Ergebnis der unsymetrischen logistischen
            Funktion im 'target' (beste Geschwindigkeit ).
            </summary>
            <param name="source">die Eingabematrix</param>
            <param name="target">die Zielmatrix</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.DeriveSigmoid">
            <summary>
            Leitet die interne Matrix ab. Bringt nur nach 'ToSigmoid' Sinn.
            </summary>
            <returns>abgeleitete Matrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.DeriveSigmoid(MatrixFFN.Tools.Matrix)">
            <summary>
            Leitet die übergebene Matrix ab. Diese sollte per 'Sigmoid'
            erstellt sein.
            </summary>
            <param name="sigMatrix">Eingabematrix</param>
            <returns>sigmoid abgeleitete Ergebnismatrix</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.DeriveSigmoid(MatrixFFN.Tools.Matrix,MatrixFFN.Tools.Matrix)">
            <summary>
            Leitet die übergebene Matrix ab. Diese sollte per 'Sigmoid'
            erstellt sein.
            </summary>
            <param name="sigMatrix">Eingabematrix</param>
            <param name="target">sigmoid abgeleitete Ergebnismatrix</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.MS_Sum">
            <summary>
            Wurzel aus der Elementsumme ( mean square sum ) für
            die Fehlerberechnung.
            </summary>
            <returns>der absolute Wert der Summe</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.FromArray(System.Double[])">
            <summary>
            Hilfsfunktion um zum Beispiel Eingabedaten in Netzwerkdaten umzuwandeln.
            <para>
            Diese Funktion erstellt eine [ doubles.Length, 1 ]-Matrix
            </para>
            </summary>
            <param name="doubles">das Feld mit den Werten</param>
            <returns></returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.FromArray(System.Double[],MatrixFFN.Tools.Matrix)">
            <summary>
            Hilfsfunktion um zum Beispiel Eingabedaten in Netzwerkdaten umzuwandeln.
            <para>
            Diese Funktion erstellt eine [ doubles.Length, 1 ]-Matrix
            </para>
            </summary>
            <param name="doubles">das Feld mit den Werten</param>
            <param name="target">die Zielmatrix</param>
            <returns>Erfolg der Operation</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.FromArrayTranspose(System.Double[])">
            <summary>
            Hilfsfunktion um zum Beispiel Eingabedaten in Netzwerkdaten umzuwandeln.
            <para>
            Diese Funktion erstellt eine [ 1, doubles.Length ]-Transpose-Matrix
            </para>
            </summary>
            <param name="doubles">das Feld mit den Werten</param>
            <returns></returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.FromArrayTranspose(System.Double[],MatrixFFN.Tools.Matrix)">
            <summary>
            Hilfsfunktion um zum Beispiel Eingabedaten in Netzwerkdaten umzuwandeln.
            <para>
            Diese Funktion erstellt eine [ 1, doubles.Length ]-Transpose-Matrix
            </para>
            </summary>
            <param name="doubles">das Feld mit den Werten</param>
            <returns></returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.ToArray">
            <summary>
            Schreibt den Inhalt der internen Matrix in ein Feld.
            </summary>
            <returns>das Ergebnisfeld</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.SpeicherDaten(System.IO.BinaryWriter)">
            <summary>
            eine traditionelle Speicherroutine ( binär )
            </summary>
            <param name="writer">ein BinaryWriter</param>
            <returns>der Erfolg des Speichervorgangs</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Matrix.LadeDaten(System.IO.BinaryReader)">
            <summary>
            eine traditionelle Laderoutine ( binär )
            </summary>
            <param name="reader">ein BinaryReader</param>
            <returns>Erfolg des Ladevorgangs</returns>
        </member>
        <member name="T:MatrixFFN.Tools.Pattern">
            <summary>
            Diese Klasse soll Daten für die sigmoide Funktion normalisieren. Wertebereich in den
            abgebildet wird ist [ 0.25, 0.75 ] - so wird eine Fehlerkorrektur auch in den 
            Extremen ermöglicht.
            <para>
            Diese Klasse kann für alle Daten genommen werden. Kategorisches sollte mit
            Pattern_Long verarbeitet werden.
            </para>
            </summary>
            <remarks>
            Bei Java hatte ich einen MathContext benutzt - hier gibt es 'decimal'. Dieser
            Datentyp soll präzise aber langsam sein. Meine Theorie war bestimmt gut und sollte 
            auch zukunftsweisend sein. Wichtig ist die Abbildung auf das Intervall und zurück.
            <para>
            Deswegen werde ich alles mit 'decimal' realisieren - dachte ich.
            Dieser Wertetyp wird aber nicht von 'Math' unterstützt und ist eine
            Baustelle. So muß es mit 'double' gehen.
            </para>
            </remarks>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.version">
            <summary>
            Erstellt ab: 05.07.2023
            <para>
            letzte Änderung: 02.09.23
            </para>
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.minReal">
            <summary>
            Die Limits des Werteverlaufs - die 'reale' Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.maxReal">
            <summary>
            Die Limits des Werteverlaufs - die 'reale' Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.minNorm">
            <summary>
            erwünschtes Spektrum in der sigmoiden Abbildung - 'norm'-Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.maxNorm">
            <summary>
            erwünschtes Spektrum in der sigmoiden Abbildung - 'norm'-Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.wertReal">
            <summary>
            lokaler Wert - 'real'
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.wertNorm">
            <summary>
            lokaler Wert - 'norm'
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.schritte">
            <summary>
            die Anzahl der Schritte zwischen den Extrema
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.schrittweiteReal">
            <summary>
            Der kleinste Abstand zwischen den einzelnen Daten - 'reale'-Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.schrittweiteNorm">
            <summary>
            Der kleinste Abstand zwischen den einzelnen Daten - 'norm'-Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern.lernwert">
            <summary>
            der spezielle Alphawert = 1 / Schritte
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Der Konstruktor bekommt einen Wert aus dem Datenfeld und die Limits für das Normalisieren.
            <para>
            Möglich ist diese Schrittanzahl für den feineren Lernwert zu erhöhen.
            </para>
            </summary>
            <param name="inWert">Wert aus dem Datenfeld</param>
            <param name="inMin">kleinster Datenwert zum kodieren</param>
            <param name="inMax">größter Datenwert zum kodieren</param>
            <param name="inSchritte">Anzahl der Schritte im Feld</param>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.#ctor(System.IO.BinaryReader)">
            <summary>
            Dieser Konstruktor läd seine Daten aus dem BinaryReader und
            initialisiert sich damit.
            </summary>
            <param name="reader">ein BinaryReader</param>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.#ctor">
            <summary>
            Der parameterlose Konstruktor - für die Serialisierung.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.BekommeWertReal(System.Double)">
            <summary>
            Zuückkonvertieren eines normalisierten Wertes in seine reale
            Wahrheit.
            </summary>
            <param name="inWert">normalisierter Wert zum konvertieren</param>
            <returns>der reale Wert</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.BekommeWertNorm(System.Double)">
            <summary>
            Normalisieren eines Wertes.
            </summary>
            <param name="inWert">zu normalisierender Wert</param>
            <returns>normalisierter Wert</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.ToString">
            <summary>
            Liefert eine Stringrepräsentation des Objektinhalts.
            </summary>
            <returns>aktuellen Objektinhalt</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.InfoString">
            <summary>
            Liefert eine Übersicht über den Objektzustand und die eingestellten Limits.
            </summary>
            <returns>der Infostring</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.TypeOf">
            <summary>
            Identifiziert die Klasse.
            </summary>
            <returns>Klasenname</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.SpeicherDaten(System.IO.BinaryWriter)">
            <summary>
            eine traditionelle Speicherroutine ( binär )
            </summary>
            <param name="writer">ein BinaryWriter</param>
            <returns>der Erfolg des Speichervorgangs</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.LadeDaten(System.IO.BinaryReader)">
            <summary>
            eine traditionelle Laderoutine ( binär )
            </summary>
            <param name="reader">ein BinaryReader</param>
            <returns>Erfolg des Ladevorgangs</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern.Init(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Errechnet aus den Eckdaten die interne Normierungskodierung.
            </summary>
            <param name="inWert">ein Wert aus dem Datenfeld</param>
            <param name="inMin">unteres Wertelimit</param>
            <param name="inMax">oberes Wertelimit</param>
            <param name="inSchritte">die erwünschten Unterschritte zwischen den Limits.</param>
        </member>
        <member name="T:MatrixFFN.Tools.Pattern_Long">
            <summary>
            Diese Klasse soll Daten für die sigmoide Funktion normalisieren. Wertebereich in den
            abgebildet wird ist [ 0.25, 0.75 ] - so wird eine Fehlerkorrektur auch in den 
            Extremen ermöglicht. 
            <para>
            Die Long-Variante ist für kategorische Daten vorgesehen.
            </para>
            </summary>
            <remarks>
            Bei Java hatte ich einen MathContext benutzt - hier gibt es 'decimal'. Dieser
            Datentyp soll präzise aber langsam sein. Meine Theorie war bestimmt gut und sollte 
            auch zukunftsweisend sein. Wichtig ist die Abbildung auf das Intervall und zurück.
            <para>
            Deswegen werde ich alles mit 'decimal' realisieren - dachte ich.
            Dieser Wertetyp wird aber nicht von 'Math' unterstützt und ist eine
            Baustelle. So muß es mit 'double' gehen.
            </para>
            </remarks>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.minReal">
            <summary>
            Die Limits des Werteverlaufs - die 'reale' Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.maxReal">
            <summary>
            Die Limits des Werteverlaufs - die 'reale' Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.minNorm">
            <summary>
            erwünschtes Spektrum in der sigmoiden Abbildung - 'norm'-Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.maxNorm">
            <summary>
            erwünschtes Spektrum in der sigmoiden Abbildung - 'norm'-Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.wertReal">
            <summary>
            lokaler Wert - 'real'
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.wertNorm">
            <summary>
            lokaler Wert - 'norm'
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.schritte">
            <summary>
            die Anzahl der Schritte zwischen den Extrema
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.schrittweiteReal">
            <summary>
            Der kleinste Abstand zwischen den einzelnen Daten - 'reale'-Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.schrittweiteNorm">
            <summary>
            Der kleinste Abstand zwischen den einzelnen Daten - 'norm'-Seite
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.Pattern_Long.lernwert">
            <summary>
            der spezielle Alphawert = 1 / Schritte
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.#ctor(System.Int64,System.Double,System.Double,System.Double)">
            <summary>
            Der Konstruktor bekommt einen Wert aus dem Datenfeld und die Limits für das Normalisieren.
            <para>
            Möglich ist diese Schrittanzahl für den feineren Lernwert zu erhöhen.
            </para>
            </summary>
            <param name="inWert">Wert aus dem Datenfeld</param>
            <param name="inMin">kleinster Datenwert zum kodieren</param>
            <param name="inMax">größter Datenwert zum kodieren</param>
            <param name="inSchritte">Anzahl der Schritte im Feld</param>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.#ctor(System.IO.BinaryReader)">
            <summary>
            Dieser Konstruktor läd seine Daten aus dem BinaryReader und
            initialisiert sich damit.
            </summary>
            <param name="reader">ein BinaryReader</param>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.#ctor">
            <summary>
            Der parameterlose Konstruktor - für die Serialisierung.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.BekommeWertReal(System.Double)">
            <summary>
            Zuückkonvertieren eines normalisierten Wertes in seine reale
            Wahrheit.
            </summary>
            <param name="inWert">normalisierter Wert zum konvertieren</param>
            <returns>der reale Wert</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.BekommeWertNorm(System.Int64)">
            <summary>
            Normalisieren eines Wertes.
            </summary>
            <param name="inWert">zu normalisierender Wert</param>
            <returns>normalisierter Wert</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.ToString">
            <summary>
            Liefert eine Stringrepräsentation des Objektinhalts.
            </summary>
            <returns>aktuellen Objektinhalt</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.InfoString">
            <summary>
            Liefert eine Übersicht über den Objektzustand und die eingestellten Limits.
            </summary>
            <returns>der Infostring</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.TypeOf">
            <summary>
            Identifiziert die Klasse.
            </summary>
            <returns>Klasenname</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.SpeicherDaten(System.IO.BinaryWriter)">
            <summary>
            eine traditionelle Speicherroutine ( binär )
            </summary>
            <param name="writer">ein BinaryWriter</param>
            <returns>der Erfolg des Speichervorgangs</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.LadeDaten(System.IO.BinaryReader)">
            <summary>
            eine traditionelle Laderoutine ( binär )
            </summary>
            <param name="reader">ein BinaryReader</param>
            <returns>Erfolg des Ladevorgangs</returns>
        </member>
        <member name="M:MatrixFFN.Tools.Pattern_Long.Init(System.Int64,System.Double,System.Double,System.Double)">
            <summary>
            Errechnet aus den Eckdaten die interne Normierungskodierung.
            </summary>
            <param name="inWert">ein Wert aus dem Datenfeld</param>
            <param name="inMin">unteres Wertelimit</param>
            <param name="inMax">oberes Wertelimit</param>
            <param name="inSchritte">die erwünschten Unterschritte zwischen den Limits.</param>
        </member>
        <member name="T:MatrixFFN.Tools.StopUhr">
            <summary>
            Ein kleine Hilfsklasse, die die Ausgabe der 'Stopwatch' schön formatiert.
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.StopUhr.uhr">
            <summary>
            Die interne Stopuhr.
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.StopUhr.dauer">
            <summary>
            Die interne Zeitspanne der Stopuhr.
            </summary>
        </member>
        <member name="F:MatrixFFN.Tools.StopUhr.uhrAn">
            <summary>
            Ein interner Wahrheitswert.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.StopUhr.#ctor">
            <summary>
            Standardkonstruktor
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.StopUhr.#ctor(System.TimeSpan)">
            <summary>
            Diesem Konstruktor wird eine TimeSpan übergeben. Nützlich für das
            Speichern des Netzes.
            </summary>
            <param name="inDauer">die abgesicherte 'dauer'</param>
        </member>
        <member name="M:MatrixFFN.Tools.StopUhr.Stop">
            <summary>
            Stopwatch,Stop() wird ausgeführt.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.StopUhr.Start">
            <summary>
            Stopwatch.Start() wird ausgeführt.
            </summary>
        </member>
        <member name="M:MatrixFFN.Tools.StopUhr.ToString">
            <summary>
            Bei laufender StopUhr wird die Zeitspanne sich jeweils ändern. Ansonsten liefert
            diese Funktion die letzte abgeschlossene Zeitmessung.
            </summary>
            <returns>die Zeitangabe</returns>
        </member>
        <member name="M:MatrixFFN.Tools.StopUhr.GetDauer">
            <summary>
            Liefert die TimeSpan - für Berechnungen besser geeignet
            </summary>
            <returns>die TimeSpan 'dauer'</returns>
        </member>
    </members>
</doc>
